{"version":3,"sources":["redux/videos/videosActionTypes.js","redux/videos/videosSelectors.js","components/VideoFooter/VideoFooter.jsx","components/VideoSidebar/VideoSidebar.jsx","components/Video/Video.jsx","App.js","containers/AppContainer.js","redux/videos/videosActions.js","serviceWorker.js","redux/videos/videosReducer.js","redux/reducers.js","redux/videos/videosSagas.js","redux/sagas.js","redux/store.js","index.js"],"names":["FETCH_VIDEOS_START","FETCH_VIDEOS_SUCCESS","FETCH_VIDEOS_FAILURE","selectVideosArr","createSelector","state","videos","VideoFooter","channel","description","song","className","MusicNote","mode","index","src","alt","VideoSidebar","likes","shares","messages","useState","isLiked","setIsLiked","handleLike","Favorite","fontSize","onClick","FavoriteBorder","Message","Share","Video","url","isPlaying","setIsPlaying","videoRef","useRef","loop","current","pause","play","ref","App","fetchVideosStart","useEffect","length","map","v","i","mapStateToProps","createStructuredSelector","connect","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","INITIAL_STATE","errMsg","videosReducer","action","payload","errMessage","combineReducers","fetchVideosAsync","videosSagas","fetch","res","json","data","put","message","takeLatest","all","rootSaga","call","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","StrictMode","AppContainer","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.52380fa7.chunk.js","sourcesContent":["export const FETCH_VIDEOS_START = 'FETCH_VIDEOS_START',\n  FETCH_VIDEOS_SUCCESS = 'FETCH_VIDEOS_SUCCESS',\n  FETCH_VIDEOS_FAILURE = 'FETCH_VIDEOS_FAILURE';\n","import { createSelector } from 'reselect';\n\nconst selectVideos = state => state.videos;\n\nexport const selectVideosArr = createSelector(\n  [selectVideos],\n  ({ videos }) => videos\n);\n","import React from 'react';\nimport './VideoFooter.css';\nimport { MusicNote } from '@material-ui/icons';\nimport Ticker from 'react-ticker';\n\nexport default function VideoFooter({ channel, description, song }) {\n  return (\n    <div className='videoFooter'>\n      <div className='videoFooter_text'>\n        <h3>{channel}</h3>\n        <p>{description}</p>\n        <div className='videoFooter_ticker'>\n          <MusicNote className='videoFooter_icon' />\n          <Ticker mode='smooth'>\n            {({ index }) => (\n              <>\n                <p>{song}</p>\n              </>\n            )}\n          </Ticker>\n        </div>\n      </div>\n      <img\n        className='videoFooter_record'\n        src='https://static.thenounproject.com/png/934821-200.png'\n        alt=''\n      />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './VideoSidebar.css';\nimport { Favorite, FavoriteBorder, Message, Share } from '@material-ui/icons';\n\nexport default function VideoSidebar({ likes, shares, messages }) {\n  const [isLiked, setIsLiked] = useState(false);\n\n  const handleLike = () => setIsLiked(!isLiked);\n\n  return (\n    <div className='videoSidebar'>\n      <div className='videoSidebar_button'>\n        {isLiked ? (\n          <Favorite fontSize='large' onClick={handleLike} />\n        ) : (\n          <FavoriteBorder fontSize='large' onClick={handleLike} />\n        )}\n        <p>{isLiked ? likes + 1 : likes}</p>\n      </div>\n      <div className='videoSidebar_button'>\n        <Message fontSize='large' />\n        <p>{shares ? shares + 1 : shares}</p>\n      </div>\n      <div className='videoSidebar_button'>\n        <Share fontSize='large' />\n        <p>{messages ? messages + 1 : messages}</p>\n      </div>\n    </div>\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport './Video.css';\nimport VideoFooter from '../VideoFooter/VideoFooter';\nimport VideoSidebar from '../VideoSidebar/VideoSidebar';\n\nexport default function Video({\n  url,\n  channel,\n  description,\n  song,\n  likes,\n  shares,\n  messages\n}) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const videoRef = useRef(null);\n\n  const handleVideoPlay = () => {\n    if (isPlaying) {\n      videoRef.current.pause();\n      setIsPlaying(false);\n    } else {\n      videoRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  return (\n    <div className='video'>\n      <video\n        className='video_player'\n        loop\n        onClick={handleVideoPlay}\n        ref={videoRef}\n        src={url}\n      ></video>\n      <VideoFooter {...{ channel, description, song }} />\n      <VideoSidebar {...{ likes, shares, messages }} />\n    </div>\n  );\n}\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport Video from './components/Video/Video';\n\nfunction App({ videos, fetchVideosStart }) {\n  useEffect(() => {\n    fetchVideosStart();\n  }, [fetchVideosStart]);\n\n  return (\n    <div className='app'>\n      <div className='app_videos'>\n        {videos.length ? videos.map((v, i) => <Video key={i} {...v} />) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { fetchVideosStart } from '../redux/videos/videosActions';\nimport { createStructuredSelector } from 'reselect';\nimport { selectVideosArr } from '../redux/videos/videosSelectors';\nimport App from '../App';\n\nconst mapStateToProps = createStructuredSelector({\n  videos: selectVideosArr\n});\n\nexport default connect(mapStateToProps, { fetchVideosStart })(App);\n","import {\n  FETCH_VIDEOS_START,\n  FETCH_VIDEOS_SUCCESS,\n  FETCH_VIDEOS_FAILURE\n} from './videosActionTypes';\n\nexport const fetchVideosStart = () => ({ type: FETCH_VIDEOS_START });\n\nexport const fetchVideosSuccess = videosArr => ({\n  type: FETCH_VIDEOS_SUCCESS,\n  payload: videosArr\n});\n\nexport const fetchVideosFailure = errMsg => ({\n  type: FETCH_VIDEOS_FAILURE,\n  payload: errMsg\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  FETCH_VIDEOS_START,\n  FETCH_VIDEOS_SUCCESS,\n  FETCH_VIDEOS_FAILURE\n} from './videosActionTypes';\n\nconst INITIAL_STATE = {\n  videos: [],\n  errMsg: ''\n};\n\nconst videosReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_VIDEOS_START:\n      return state;\n    case FETCH_VIDEOS_SUCCESS:\n      return { ...state, videos: action.payload };\n    case FETCH_VIDEOS_FAILURE:\n      return { ...state, errMessage: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default videosReducer;\n","import { combineReducers } from 'redux';\nimport videosReducer from './videos/videosReducer';\n\nexport default combineReducers({ videos: videosReducer });\n","import { takeLatest, put, all } from 'redux-saga/effects';\nimport { FETCH_VIDEOS_START } from './videosActionTypes';\nimport { fetchVideosSuccess, fetchVideosFailure } from './videosActions';\n\nconst url = 'https://tiktokclone-mern-backend7868.herokuapp.com/v2/posts';\n\nfunction* fetchVideosAsync() {\n  try {\n    const res = yield fetch(url);\n    const data = yield res.json();\n    yield put(fetchVideosSuccess(data));\n  } catch (err) {\n    yield put(fetchVideosFailure(err.message));\n  }\n}\n\nfunction* fetchVideosStart() {\n  yield takeLatest(FETCH_VIDEOS_START, fetchVideosAsync);\n}\n\nexport default function* videosSagas() {\n  yield all([fetchVideosStart()]);\n}\n","import { all, call } from '@redux-saga/core/effects';\nimport videosSagas from './videos/videosSagas';\n\nexport default function* rootSaga() {\n  yield all([call(videosSagas)]);\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './reducers';\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport { store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppContainer from './containers/AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppContainer />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}